plugins {
    id 'java-library'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.+'
}

version = minecraft_version + "-" + mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url = "https://maven.resourcefulbees.com/repository/maven-public/"
    }
    flatDir {
        dirs 'libs'
    }
}
dependencies {
    // NeoForge
    implementation "net.neoforged:neoforge:${neo_version}"
    runtimeOnly "dev.emi:emi-${emi_version}"
    implementation "com.teamresourceful.resourcefullib:resourcefullib-neoforge-${resourcefulLib_version}"

    implementation "com.teamresourceful:yabn:${yabn_version}"
    implementation "com.teamresourceful:bytecodecs:${bytecodecs_version}"

    //compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    //compileOnly "mezz.jei:jei-${mc_version}-forge-api:${jei_version}"
    //runtimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version           : minecraft_version,
            minecraft_version_range     : minecraft_version_range,
            neo_version                 : neo_version,
            neo_version_range           : neo_version_range,
            loader_version_range        : loader_version_range,
            mod_id                      : mod_id,
            mod_name                    : mod_name,
            mod_license                 : mod_license,
            mod_version                 : mod_version,
            mod_authors                 : mod_authors,
            mod_description             : mod_description,
            pack_format_number          : pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

//jar {
//    manifest {
//        attributes([
//                "Specification-Title"     : mod_id,
//                "Specification-Vendor"    : mod_authors,
//                "Specification-Version"   : '1', // We are version 1 of ourselves
//                "Implementation-Title"    : project.name,
//                "Implementation-Version"  : project.jar.archiveVersion,
//                "Implementation-Vendor"   : mod_authors,
//                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
//        ])
//    }
//}
//
//jar.finalizedBy('reobfJar')

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file://${project.projectDir}/mcmodsrepo"
//        }
//    }
//}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
